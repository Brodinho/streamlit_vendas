import pandas as pd
import streamlit as st
import plotly.express as px
from dataset import df
from PIL import Image
from utils import formata_colunas_monetarias, formatar_valor, formatar_moeda
from grafics import (criar_mapa_estado, criar_grafico_linha_mensal, 
                    criar_grafico_barras_estado, criar_grafico_barras_categoria)
from config import carregar_configuracoes, salvar_configuracoes

# Configura√ß√£o da p√°gina - deve ser a primeira chamada Streamlit
st.set_page_config(
    page_title="Dashboard de Vendas",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="collapsed"
)

image = Image.open('imagens/sales.png')

# Dicion√°rio de mapeamento de nomes de colunas
mapeamento_colunas = {
    'sequencial': 'Sequencial',
    'tipo': 'Tipo Movimento',
    'codtra': 'Transa√ß√£o',
    'os': 'O.S.',
    'itemOS': 'Item O.S.',
    'codcli': 'C√≥digo Cliente',
    'cnpj': 'CNPJ',
    'razao': 'Raz√£o Social',
    'fantasia': 'Fantasia',
    'cfop': 'CFOP',
    'data': 'Data Cadastro',
    'emissao': 'Data Emiss√£o',
    'nota': 'Nota N√∫mero',
    'serie': 'S√©rie',
    'chaveNfe': 'Chave NF-e',
    'item': 'Item',
    'codProduto': 'C√≥d. do Produto',
    'produto': 'Produto',
    'unidSaida': 'Unid. de Sa√≠da',
    'ncm': 'NCM',
    'codGrupo': 'C√≥d. do Grupo',
    'grupo': 'Grupo',
    'codSubGrupo': 'C√≥d. Sub-Grupo',
    'codVendedor': 'C√≥d. Vendedor',
    'vendedorRed': 'Vendedor Reduzido',
    'cidade': 'Cidade',
    'uf': 'U.F.',
    'tipoOs': 'Tipo OS',
    'descricaoTipoOs': 'Descri√ß√£o Tipo OS',
    'codRegiao': 'C√≥d. Regi√£o',
    'valorfaturado': 'Valor Faturado',
    'quant': 'Quantidade',
    'valoripi': 'Valor IPI',
    'valoricms': 'Valor ICMS',
    'valoriss': 'Valor ISS',
    'valorSubs': 'Valor Sub. Trib.',
    'valorFrete': 'Valor do Frete',
    'valorNota': 'Valor da Nota',
    'valorContabil': 'Valor Cont√°bil',
    'retVlrPis': 'Ret. Valor PIS',
    'retVlrCofins': 'Ret. Valor COFINS',
    'aliIpi': 'Al√≠quota IPI',
    'porReducaoIcms': 'Porc.Redu√ß√£o ICMS',
    'cstIcms': 'CST ICMS',
    'baseIcms': 'Base ICMS',
    'valorCusto': 'Valor Custo',
    'valorDesconto': 'Valor do Desconto',
    'desctra': 'Descri√ß√£o da Transa√ß√£o',
    'servico': 'Servi√ßo',
    'libFatura': 'Dt. Lib. Fatura',
    'latitude': 'Latitude',
    'longitude': 'Longitude'
}

def formatar_numero_br(numero):
    """Formata um n√∫mero para o padr√£o brasileiro (ex: 1.234,56)"""
    return f"{numero:,}".replace(",", "X").replace(".", ",").replace("X", ".")

def formata_colunas_monetarias(valor):
    """Formata valores monet√°rios para o padr√£o brasileiro"""
    if pd.isna(valor):
        return ""
    return f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def formatar_data(data):
    """Formata data para o padr√£o brasileiro"""
    if pd.isna(data):
        return ""
    return data.strftime('%d-%m-%Y')

def formatar_datetime(data):
    """Formata datetime para o padr√£o brasileiro"""
    if pd.isna(data):
        return ""
    return data.strftime('%d-%m-%Y %H:%M:%S')

def mostrar_configuracao():
    st.title('Configura√ß√£o do Dashboard')
    st.write('Selecione os gr√°ficos que deseja visualizar:')

    # Lista completa de gr√°ficos dispon√≠veis
    graficos = {
        'mapa': 'Mapa de Faturamento por Estado/Pa√≠s',
        'barras_estado': 'Gr√°fico de Barras - Top 5 Estados/Pa√≠ses',
        'linha_mensal': 'Gr√°fico de Linha - Faturamento Mensal',
        'barras_categoria': 'Gr√°fico de Barras - Faturamento por Categoria'
    }

    # Carregar configura√ß√µes salvas (se existirem)
    config_salva = carregar_configuracoes()
    
    # Criar checkboxes para cada gr√°fico
    selecao_graficos = {}
    for key, descricao in graficos.items():
        # Use a configura√ß√£o salva se existir, caso contr√°rio use True como padr√£o
        valor_padrao = config_salva.get(key, True) if config_salva else True
        selecao_graficos[key] = st.checkbox(descricao, value=valor_padrao)

    # Bot√£o para salvar configura√ß√µes
    if st.button('Salvar Configura√ß√µes e Visualizar Dashboard'):
        salvar_configuracoes(selecao_graficos)
        st.session_state.pagina = 'dashboard'
        st.rerun()

def mostrar_dashboard():
    # Bot√£o para voltar √† configura√ß√£o
    if st.button('‚öôÔ∏è Configurar Gr√°ficos'):
        st.session_state.pagina = 'config'
        st.rerun()

    # Dividir o layout em duas colunas
    col1, col2 = st.columns([1, 6])
    with col1:
        st.image(image, use_container_width=True)
    with col2:
        st.title("Dashboard de Vendas")
        st.subheader("E m p r e s a m i x")

    # Criar abas
    tab1, tab2, tab3 = st.tabs(["üìä Gr√°ficos", "üìã Dataset", "üë• Vendedores"])

    with tab1:  # Aba de Gr√°ficos
        # Adicionar seletor de ano com m√∫ltipla sele√ß√£o e largura controlada
        anos_disponiveis = sorted(df['data'].dt.year.dropna().unique().astype(int))
        if anos_disponiveis:
            # CSS para controlar a largura din√¢mica mantendo altura fixa
            st.markdown(
                """
                <style>
                /* Container principal do multiselect */
                div[data-testid="stMultiSelect"] {
                    min-width: 150px;
                    width: auto !important;
                    display: inline-block !important;
                }
                
                /* Container dos itens selecionados */
                div[data-testid="stMultiSelect"] > div {
                    width: auto !important;
                    min-width: 150px;
                    display: inline-flex !important;
                }
                
                /* Container que mostra os itens selecionados */
                div[data-testid="stMultiSelect"] > div > div {
                    height: 38px !important;
                    display: inline-flex !important;
                    flex-direction: row !important;
                    flex-wrap: nowrap !important;
                    gap: 4px;
                    overflow: visible !important;
                    width: auto !important;
                }
                
                /* Estilo para os bot√µes individuais */
                div[data-testid="stMultiSelect"] div[role="button"] {
                    white-space: nowrap;
                    display: inline-block !important;
                }

                /* Container da coluna */
                div.stColumn {
                    width: auto !important;
                    min-width: 150px !important;
                    flex-grow: 1 !important;
                }
                </style>
                """, 
                unsafe_allow_html=True
            )
            
            # Criar uma coluna que se ajusta ao conte√∫do
            col1, col2 = st.columns([3, 3])  # Propor√ß√£o mais equilibrada
            with col1:
                # Adicionar op√ß√£o "Todos" e permitir m√∫ltipla sele√ß√£o
                opcoes_anos = ['Todos'] + [str(ano) for ano in anos_disponiveis]
                anos_selecionados = st.multiselect(
                    'Selecione o(s) Ano(s):', 
                    opcoes_anos,
                    default=['Todos']
                )
            
            # L√≥gica para tratar a sele√ß√£o
            if 'Todos' in anos_selecionados:
                anos_filtro = anos_disponiveis
            else:
                anos_filtro = [int(ano) for ano in anos_selecionados]
                
            if not anos_selecionados:  # Se nenhum ano selecionado
                st.warning('Por favor, selecione pelo menos um ano.')
                return
        else:
            st.error('N√£o h√° dados com datas v√°lidas dispon√≠veis')
            return

        config = carregar_configuracoes()
        
        if config is None:
            st.error('Erro ao carregar configura√ß√µes')
            st.session_state.pagina = 'config'
            st.rerun()

        if config.get('mapa', True):
            st.subheader('Mapa de Faturamento por Estado e Pa√≠ses')
            graf_map_estado = criar_mapa_estado(df, anos_filtro)
            if graf_map_estado is not None:
                st.plotly_chart(graf_map_estado, use_container_width=True)
            else:
                st.warning(f'N√£o h√° dados dispon√≠veis para o(s) ano(s) selecionado(s)')

        if config.get('barras_estado', True):
            st.subheader('Estados e Pa√≠ses com maior faturamento (Top 5)')
            grafbar_fat_estado = criar_grafico_barras_estado(df, anos_filtro)
            if grafbar_fat_estado is not None:
                st.plotly_chart(grafbar_fat_estado, use_container_width=True)
            else:
                st.warning(f'N√£o h√° dados dispon√≠veis para o(s) ano(s) selecionado(s)')

        if config.get('linha_mensal', True):
            st.subheader('Faturamento anual m√™s-a-m√™s')
            graflinha_fat_mensal = criar_grafico_linha_mensal(df, anos_filtro)
            if graflinha_fat_mensal is not None:
                st.plotly_chart(graflinha_fat_mensal, use_container_width=True)
            else:
                st.warning('N√£o h√° dados dispon√≠veis para o gr√°fico de linha mensal')

        if config.get('barras_categoria', True):
            st.subheader('Faturamento por Sub-Categoria (Top 5)')
            graf_fat_categoria = criar_grafico_barras_categoria(df, anos_filtro)
            if graf_fat_categoria is not None:
                st.plotly_chart(graf_fat_categoria, use_container_width=True)
            else:
                st.warning('N√£o h√° dados dispon√≠veis para o gr√°fico de categorias')

    with tab2:  # Aba do Dataset
        st.header("Dataset")
        
        # Criar colunas para organizar os controles
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            # Obter todas as colunas dispon√≠veis com os novos nomes
            todas_colunas = [mapeamento_colunas.get(col, col) for col in df.columns]
            
            # Inicializar o estado da sess√£o se necess√°rio
            if 'colunas_selecionadas' not in st.session_state:
                st.session_state.colunas_selecionadas = todas_colunas
            
            # Criar um multiselect para sele√ß√£o de colunas
            colunas_selecionadas = st.multiselect(
                'Selecione as colunas para visualiza√ß√£o:',
                todas_colunas,
                default=st.session_state.colunas_selecionadas
            )
            
            # Criar colunas para os bot√µes
            btn_col1, btn_col2 = st.columns(2)
            with btn_col1:
                if st.button('Selecionar Todas'):
                    st.session_state.colunas_selecionadas = todas_colunas
                    st.rerun()
            
            with btn_col2:
                if st.button('Limpar Sele√ß√£o'):
                    st.session_state.colunas_selecionadas = []
                    st.rerun()
        
        with col2:
            # Adicionar campo de busca para filtrar linhas
            texto_busca = st.text_input('Buscar em todas as colunas:', '')
        
        # Criar uma nova linha para o slider de registros por p√°gina
        st.write("")  # Adiciona um espa√ßo
        col_slider1, col_slider2 = st.columns([2, 4])
        
        with col_slider1:
            # Adicionar n√∫mero de registros por p√°gina
            registros_por_pagina = st.select_slider(
                'Registros por p√°gina:',
                options=[10, 25, 50, 100],
                value=25,
                key='registros_por_pagina'
            )
        
        # Filtrar o DataFrame baseado na busca
        if texto_busca:
            mascara = pd.DataFrame(False, index=df.index, columns=['match'])
            # Usar os nomes originais das colunas para a busca
            colunas_originais = [col for col, novo_nome in mapeamento_colunas.items() 
                               if novo_nome in colunas_selecionadas]
            
            for coluna in colunas_originais:  # Usar nomes originais aqui
                mascara['match'] |= df[coluna].astype(str).str.contains(texto_busca, case=False, na=False)
            df_filtrado = df[mascara['match']]
        else:
            df_filtrado = df
            
        # Mostrar o DataFrame com as colunas renomeadas
        if colunas_selecionadas:
            # Converter nomes das colunas selecionadas de volta para os nomes originais
            colunas_originais = [col for col, novo_nome in mapeamento_colunas.items() 
                               if novo_nome in colunas_selecionadas]
            
            df_exibir = df_filtrado[colunas_originais].copy()
            df_exibir.columns = [mapeamento_colunas.get(col, col) for col in df_exibir.columns]
            
            # Reordenar para colocar 'Descri√ß√£o da Transa√ß√£o' ap√≥s 'Transa√ß√£o'
            if 'Transa√ß√£o' in df_exibir.columns and 'Descri√ß√£o da Transa√ß√£o' in df_exibir.columns:
                cols = df_exibir.columns.tolist()
                trans_idx = cols.index('Transa√ß√£o')
                cols.remove('Descri√ß√£o da Transa√ß√£o')
                cols.insert(trans_idx + 1, 'Descri√ß√£o da Transa√ß√£o')
                df_exibir = df_exibir[cols]
            
            # Formatar colunas num√©ricas sem separador de milhares
            colunas_sem_formato = ['Sequencial', 'O.S.', 'C√≥d. do Grupo', 'C√≥d. Vendedor']
            for col in colunas_sem_formato:
                if col in df_exibir.columns:
                    df_exibir[col] = df_exibir[col].fillna('').astype(str).replace('\.0$', '', regex=True)
            
            # Formatar colunas de data
            if 'Data Cadastro' in df_exibir.columns:
                df_exibir['Data Cadastro'] = df_exibir['Data Cadastro'].apply(formatar_data)
            if 'Data Emiss√£o' in df_exibir.columns:
                df_exibir['Data Emiss√£o'] = df_exibir['Data Emiss√£o'].apply(formatar_data)
            if 'Dt. Lib. Fatura' in df_exibir.columns:
                df_exibir['Dt. Lib. Fatura'] = df_exibir['Dt. Lib. Fatura'].apply(formatar_datetime)
            
            # Formatar colunas monet√°rias
            colunas_monetarias = [
                'Valor Faturado', 'Valor IPI', 'Valor ICMS', 'Valor ISS', 
                'Valor Sub. Trib.', 'Valor do Frete', 'Valor da Nota', 
                'Valor Cont√°bil', 'Ret. Valor PIS', 'Ret. Valor COFINS', 
                'Base ICMS', 'Valor Custo', 'Valor do Desconto'
            ]
            for col in colunas_monetarias:
                if col in df_exibir.columns:
                    df_exibir[col] = df_exibir[col].apply(formata_colunas_monetarias)
            
            # Mostrar informa√ß√µes sobre o dataset
            total_registros = len(df_exibir)
            num_paginas = (total_registros + registros_por_pagina - 1) // registros_por_pagina
            st.write(f'Total de registros: {formatar_numero_br(total_registros)} | Total de p√°ginas: {formatar_numero_br(num_paginas)}')
            
            # Adicionar pagina√ß√£o
            if num_paginas > 1:
                # Adicionar CSS para controlar a largura do input
                st.markdown("""
                    <style>
                    [data-testid="stNumberInput"] {
                        width: 100px !important;
                    }
                    /* Ajusta o container do input */
                    [data-testid="stNumberInput"] > div {
                        width: 100px !important;
                    }
                    /* Ajusta o input em si */
                    [data-testid="stNumberInput"] input {
                        width: 100px !important;
                        text-align: center;
                    }
                    </style>
                """, unsafe_allow_html=True)
                
                # Criar uma coluna estreita para o input de p√°gina
                col_pagina1, col_pagina2 = st.columns([1, 15])
                with col_pagina1:
                    pagina_atual = st.number_input('P√°gina:', min_value=1, max_value=num_paginas, value=1) - 1
                
                inicio = pagina_atual * registros_por_pagina
                fim = min(inicio + registros_por_pagina, total_registros)
                
                df_pagina = df_exibir.iloc[inicio:fim]
                st.dataframe(df_pagina)
                st.write(f'Mostrando registros {formatar_numero_br(inicio+1)} a {formatar_numero_br(fim)} de {formatar_numero_br(total_registros)}')
            else:
                st.dataframe(df_exibir)
        else:
            st.warning('Por favor, selecione pelo menos uma coluna para visualizar os dados.')

    with tab3:  # Aba de Vendedores
        st.header("Vendedores")
        # Adicione aqui o c√≥digo para exibir informa√ß√µes dos vendedores
        vendedores = df[['vendedor', 'valorNota']].groupby('vendedor').sum().sort_values('valorNota', ascending=False)
        st.dataframe(vendedores)

def main():
    # Inicializar o estado da sess√£o se necess√°rio
    if 'pagina' not in st.session_state:
        st.session_state.pagina = 'config'

    # Mostrar a p√°gina apropriada
    if st.session_state.pagina == 'config':
        mostrar_configuracao()
    else:
        mostrar_dashboard()

if __name__ == '__main__':
    main()

